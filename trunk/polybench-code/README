* * * * * * * * * *
* PolyBench/C 4.0 *
* * * * * * * * * *

Copyright (c) 2011-2015 the Ohio State University.

Contact:
   Louis-Noel Pouchet <pouchet@cse.ohio-state.edu>
   Tomofumi Yuki <tomofumi.yuki@inria.fr>

-------------
* New in 4.0:
-------------


This update includes many changes. Please see CHANGELOG for detailed list of changes.

=Important Note=
 We found a number of bugs in PolyBench kernels that cause the implementation
to produce outputs that do not match what is expected from the mathematical
specification. Many of them did not influence the program behavior in an
important way (e.g., the bug in covariance was simply a missing division in the
end, which does not influence dependences or the shape of the iteration space).
However, some had non-negligible impact. These kernels are described below.

 - adi: There was an off-by-one error, which made back substitution part of a pass in ADI to not
   depend on the forward pass, making the program fully tilable.
 - syrk: There was a typo on the loop bounds that made the iteration space
   rectangular where it should have been triangular. This has led to additional
   dependences and two times more operations than intended.
 - trmm: There was a typo on the loop bounds so that the wrong half of the
   matrix was used in the computation. This led to additional dependences,
   making it harder to parallelize this kernel.
 - lu: An innermost loop was missing. This cause the kernel to perform about half the work
   compared to a correct implementation of LU decomposition. It is unclear if
   the original code was intended for input matrices with specific
   characteristics. The new implementation is the generic LU decomposition.

In addition, some of the kernels used "unnatural" memory allocation, where
variables used in accumulation were fully expanded. These variables were changed to 
only use a scalar, making some of the kernels more challenging.

=Summary of Changes=
-Fixed out-of-bounds issue in covariance and 2mm
 (Reported by Tobias Grosser)
-Fixed a bug in polybench.h when 4D arrays were allocated.
 (Reported by Amarin Phaosawasdi)
-Changed naming of a variable in polybench.c/xmalloc to avoid issues when compiled as C++.
 (Reported by Sven Verdoolaege)
-Added POLYBENCH_USE_RESTRICT to allow compilers to assume alias-free.
 (Patch by Tobias Grosser)
-Added SCALAR_VAL, SQRT_FUN, EXP_FUN, and POW_FUN macros to switch
 float/double versions of the math functions depending on the data type.

-Removed dynprog. (Replaced by nussinov)
-Added nussinov; a dynamic programming algorithm for sequence alignment.
 (Code by Dave Wonnacott and his students) 
-Removed reg_detect. (Replaced by deriche)
-Added deriche; edge detector filter.
 (Code by Gael Deest)
-Removed fdtd-apml. (Replaced by heat-3d)
-Added heat-3d; heat equation over 3D data domain.
 (Original specification from Pochoir compiler test case)
-Changed jacobi-1d-imper and jacobi-2d-imper to jacobi-1d and jacobi-2d, respectively.
-jacobi-1d, jacobi-2d, and heat-3d performs two time steps using alternating
 arrays per an iteration of the outermost loop. This is to avoid the copy loop
 in the old xxx-imper versions. The number of stencil iterations are now
 restricted to be even numbers (2x of the parameter TSTEPS).

-The following kernels have been modified (bug fixes):
  adi, durbin, lu, ludcmp, syrk, trmm, cholesky, covariance, correlation

-BLAS kernels are now commented with the parameters in original BLAS
 which corresponds to the implementation in PolyBench.
-BLAS kernels now closely matches the original version. However, gemver and
 gesummv remains the same as it is not part of current BLAS.
-Tuned the initialization functions to reduce the possibility to have 'inf'
 in outputs. Specifically, the initial values are much closer to 1 for most
 linear algebra kernels now (was up to N in prior versions).

-Added polybench.pdf that explains each kernel in detail.

-------------
* New in 3.2:
-------------

- Rename the package to PolyBench/C, to prepare for the upcoming
  PolyBench/Fortran and PolyBench/GPU.
- Fixed a typo in polybench.h, causing compilation problems for 5D arrays.
- Fixed minor typos in correlation, atax, cholesky, fdtd-2d.
- Added an option to build the test suite with constant loop bounds
  (default is parametric loop bounds)


-------------
* New in 3.1:
-------------

- Fixed a typo in polybench.h, causing compilation problems for 3D arrays.
- Set by default heap arrays, stack arrays are now optional.


-------------
* New in 3.0:
-------------

- Multiple dataset sizes are predefined. Each file comes now with a .h
  header file defining the dataset.
- Support of heap-allocated arrays. It uses a single malloc for the
  entire array region, the data allocated is cast into a C99
  multidimensional array.
- One benchmark is out: gauss_filter
- One benchmark is in: floyd-warshall
- PAPI support has been greatly improved; it also can report the
  counters on a specific core to be set by the user.



----------------
* Mailing lists:
----------------

** polybench-announces@lists.sourceforge.net:
---------------------------------------------

Announces about releases of PolyBench.

** polybench-discussion@lists.sourceforge.net:
----------------------------------------------

General discussions reg. PolyBench.



-----------------------
* Available benchmarks:
-----------------------

See utilities/benchmark_list for paths to each files.
See doc/polybench.pdf for detailed description of the algorithms.


------------------------------
* Sample compilation commands:
------------------------------


** To compile a benchmark without any monitoring:
-------------------------------------------------

$> gcc -I utilities -I linear-algebra/kernels/atax utilities/polybench.c linear-algebra/kernels/atax/atax.c -o atax_base


** To compile a benchmark with execution time reporting:
--------------------------------------------------------

$> gcc -O3 -I utilities -I linear-algebra/kernels/atax utilities/polybench.c linear-algebra/kernels/atax/atax.c -DPOLYBENCH_TIME -o atax_time


** To generate the reference output of a benchmark:
---------------------------------------------------

$> gcc -O0 -I utilities -I linear-algebra/kernels/atax utilities/polybench.c linear-algebra/kernels/atax/atax.c -DPOLYBENCH_DUMP_ARRAYS -o atax_ref
$> ./atax_ref 2>atax_ref.out




-------------------------
* Some available options:
-------------------------

They are all passed as macro definitions during compilation time (e.g,
-Dname_of_the_option).

- POLYBENCH_TIME: output execution time (gettimeofday) [default: off]

- POLYBENCH_NO_FLUSH_CACHE: don't flush the cache before calling the
  timer [default: flush the cache]

- POLYBENCH_LINUX_FIFO_SCHEDULER: use FIFO real-time scheduler for the
  kernel execution, the program must be run as root, under linux only,
  and compiled with -lc [default: off]

- POLYBENCH_CACHE_SIZE_KB: cache size to flush, in kB [default: 33MB]

- POLYBENCH_STACK_ARRAYS: use stack allocation instead of malloc [default: off]

- POLYBENCH_DUMP_ARRAYS: dump all live-out arrays on stderr [default: off]

- POLYBENCH_CYCLE_ACCURATE_TIMER: Use Time Stamp Counter to monitor
  the execution time of the kernel [default: off]

- POLYBENCH_PAPI: turn on papi timing (see below).

- MINI_DATASET, SMALL_DATASET, STANDARD_DATASET, LARGE_DATASET,
  EXTRALARGE_DATASET: set the dataset size to be used
  [default: STANDARD_DATASET]

- POLYBENCH_USE_C99_PROTO: Use standard C99 prototype for the functions.

- POLYBENCH_USE_SCALAR_LB: Use scalar loop bounds instead of parametric ones.

- POLYBENCH_USE_RESTRICT: Use restrict keyword to allow compilers to assume absense of aliasing.

---------------
* PAPI support:
---------------

** To compile a benchmark with PAPI support:
--------------------------------------------

$> gcc -O3 -I utilities -I linear-algebra/kernels/atax utilities/polybench.c linear-algebra/kernels/atax/atax.c -DPOLYBENCH_PAPI -lpapi -o atax_papi


** To specify which counter(s) to monitor:
------------------------------------------

Edit utilities/papi_counters.list, and add 1 line per event to
monitor. Each line (including the last one) must finish with a ',' and
both native and standard events are supported.

The whole kernel is run one time per counter (no multiplexing) and
there is no sampling being used for the counter value.



------------------------------
* Accurate performance timing:
------------------------------

With kernels that have an execution time in the orders of a few tens
of milliseconds, it is critical to validate any performance number by
repeating several times the experiment. A companion script is
available to perform reasonable performance measurement of a PolyBench.

$> gcc -O3 -I utilities -I linear-algebra/kernels/atax utilities/polybench.c linear-algebra/kernels/atax/atax.c -DPOLYBENCH_TIME -o atax_time
$> ./utilities/time_benchmark.sh ./atax_time

This script will run five times the benchmark (that must be a
PolyBench compiled with -DPOLYBENCH_TIME), eliminate the two extremal
times, and check that the deviation of the three remaining does not
exceed a given threshold, set to 5%.

It is also possible to use POLYBENCH_CYCLE_ACCURATE_TIMER to use the
Time Stamp Counter instead of gettimeofday() to monitor the number of
elapsed cycles.




----------------------------------------
* Generating macro-free benchmark suite:
----------------------------------------

(from the root of the archive:)
$> PARGS="-I utilities -DPOLYBENCH_TIME";
$> for i in `cat utilities/benchmark_list`; do perl utilities/create_cpped_version.pl $i "$PARGS"; done

This create for each benchmark file 'xxx.c' a new file
'xxx.preproc.c'. The PARGS variable in the above example can be set to
the desired configuration, for instance to create a full C99 version
(parametric arrays):

$> PARGS="-I utilities -DPOLYBENCH_USE_C99_PROTO";
$> for i in `cat utilities/benchmark_list`; do perl utilities/create_cpped_version.pl $i "$PARGS"; done


------------------
* Utility scripts:
------------------
create_cpped_version.pl: Used in the above for generating macro free version.

makefile-gen.pl: generates make files in each directory. Options are globally
                 configurable through config.mk at polybench root.
  header-gen.pl: refers to 'polybench.spec' file and generates header in
                 each directory. Allows default problem sizes and datatype to
                 be configured without going into each header file.
 
    run-all.pl: compiles and runs each kernel.
      clean.pl: runs make clean in each directory and then removes Makefile.

